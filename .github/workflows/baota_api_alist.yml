name: Check Baota Update

on:
  schedule:
    - cron: '0 */8 * * *'  # 每8小时执行一次
  workflow_dispatch:

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # 首先获取最新的 Release 信息
      - name: Get Latest Release
        id: latest_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const release = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              return release.data.tag_name;
            } catch (e) {
              return '';  // 如果没有 release 返回空字符串
            }

      # 获取宝塔最新版本
      - name: Get Baota Version
        id: baota_version
        run: |
          # 你的获取宝塔版本的代码
          VERSION="获取到的版本号"
          echo "::set-output name=version::$VERSION"

      # 比较版本并决定是否创建新的 Release
      - name: Compare and Create Release
        if: steps.latest_release.outputs.result != steps.baota_version.outputs.version
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ steps.baota_version.outputs.version }}';
            const releaseExists = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            }).then(response => 
              response.data.some(release => release.tag_name === version)
            );
            
            if (!releaseExists) {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: `Release ${version}`,
                body: 'Automated release for Baota version ' + version,
                draft: false,
                prerelease: false
              });
            }

